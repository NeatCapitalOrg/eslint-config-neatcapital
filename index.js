module.exports = {
  env: {
    es6: true,
    node: true
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2017,
    project: 'tsconfig.eslint.json',
    sourceType: 'module'
  },
  plugins: [
    'eslint-plugin-import',
    '@typescript-eslint',
    '@typescript-eslint/tslint',
    'eslint-plugin-unicorn'
  ],
  rules: {
    'unicorn/numeric-separators-style': ['error', {
      number: {
        minimumDigits: 5,
        groupLength: 3
      }
    }],
    'object-curly-spacing': ['error', 'always'],
    // The following rules are rules that were automatically generated by the tslint => eslint config generator
    // for our old tslint config. (comment further down marks where the old eslint rules begin)
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': 'off',
    '@typescript-eslint/ban-types': [
      'error',
      {
        types: {
          Object: {
            message: 'Avoid using the `Object` type. Did you mean `object`?'
          },
          Function: {
            message: 'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.'
          },
          Boolean: {
            message: 'Avoid using the `Boolean` type. Did you mean `boolean`?'
          },
          Number: {
            message: 'Avoid using the `Number` type. Did you mean `number`?'
          },
          String: {
            message: 'Avoid using the `String` type. Did you mean `string`?'
          },
          Symbol: {
            message: 'Avoid using the `Symbol` type. Did you mean `symbol`?'
          }
        }
      }
    ],
    '@typescript-eslint/consistent-type-assertions': 'error',
    '@typescript-eslint/consistent-type-definitions': 'off',
    '@typescript-eslint/dot-notation': 'error',
    '@typescript-eslint/explicit-member-accessibility': [
      'off',
      {
        accessibility: 'explicit'
      }
    ],

    '@typescript-eslint/member-ordering': [
      'error',
      {
        default: [
          'public-static-field',
          'public-static-method',
          'protected-static-field',
          'protected-static-method',
          'private-static-field',
          'private-static-method',
          'public-instance-field',
          'protected-instance-field',
          'private-instance-field',
          'public-constructor',
          'protected-constructor',
          'private-constructor',
          'public-instance-method',
          'protected-instance-method',
          'private-instance-method'
        ]
      }
    ],
    '@typescript-eslint/naming-convention': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-inferrable-types': [
      'error',
      {
        ignoreParameters: true
      }
    ],
    '@typescript-eslint/no-misused-new': 'error',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/no-parameter-properties': 'off',
    '@typescript-eslint/no-shadow': [
      'error',
      {
        allow: ['err', 'e', 'error']
      }
    ],

    '@typescript-eslint/no-unused-expressions': [
      'error',
      {
        allowTernary: true
      }
    ],
    '@typescript-eslint/no-unused-vars': ['error', { args: 'none' }],
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-var-requires': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-namespace-keyword': 'error',
    '@typescript-eslint/quotes': [
      'error',
      'single',
      {
        allowTemplateLiterals: true
      }
    ],
    '@typescript-eslint/semi': [
      'error',
      'always'
    ],
    '@typescript-eslint/triple-slash-reference': [
      'error',
      {
        path: 'always',
        types: 'prefer-import',
        lib: 'always'
      }
    ],
    // '@typescript-eslint/type-annotation-spacing': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    'arrow-parens': [
      'error',
      'always'
    ],
    'comma-dangle': 'error',
    'complexity': 'off',
    'constructor-super': 'error',
    'curly': 'error',
    'eol-last': 'error',
    'eqeqeq': [
      'error',
      'smart'
    ],
    'guard-for-in': 'error',
    'id-blacklist': [
      'error',
      'any',
      'Number',
      'number',
      'String',
      'string',
      'Boolean',
      'boolean',
      'Undefined',
      'undefined'
    ],
    'id-match': 'error',
    'import/order': 'off',
    'max-classes-per-file': 'off',
    'new-parens': 'error',
    'newline-per-chained-call': 'off',
    'no-bitwise': 'error',
    'no-caller': 'error',
    'no-cond-assign': 'error',
    'no-console': 'error',
    'no-debugger': 'error',
    'no-empty': 'off',
    'no-eval': 'error',
    'no-fallthrough': 'error',
    'no-invalid-this': 'off',
    'no-multiple-empty-lines': 'error',
    'no-new-wrappers': 'error',
    'no-throw-literal': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-unsafe-finally': 'error',
    'no-unused-labels': 'error',
    'object-shorthand': 'error',
    'one-var': [
      'error',
      'never'
    ],
    'prefer-const': 'error',
    'prefer-template': 'error',
    'quote-props': [
      'error',
      'consistent-as-needed'
    ],
    'radix': 'error',
    'space-before-function-paren': [
      'error',
      {
        anonymous: 'never',
        asyncArrow: 'always',
        named: 'never'
      }
    ],
    'spaced-comment': [
      'error',
      'always',
      {
        'line': {
          'markers': ['/'],
          'exceptions': ['+', '-']
        },
        'block': {
          // Really really hacky fix for working around buggy spaced-comment rule for some of our
          // block comments with multiple stars in a row in one line
          'markers': ['**********', '*********', '********', '*******', '******', '*****', '****', '***', '**', '/'],
          'exceptions': ['*'],
          'balanced': false
        }
      }
    ],
    'use-isnan': 'error',
    'valid-typeof': 'off',
    'indent': [
      'error', 2,
      {
        'SwitchCase': 1,
        'FunctionDeclaration': {
          'parameters': 'off'
        },
        'FunctionExpression': {
          'parameters': 'off'
        },
        'CallExpression': {

        }
      }
    ],
    // Rules from old eslint file merged with the tslint rules
    'array-bracket-spacing': 'error',
    'arrow-spacing': 'error',
    'block-spacing': 'error',
    'brace-style': ['error', '1tbs', { 'allowSingleLine': true }],
    'camelcase': 'off',
    'comma-spacing': 'error',
    'comma-style': 'error',
    'computed-property-spacing': 'error',
    'dot-location': ['error', 'property'],
    'func-call-spacing': 'error',
    'handle-callback-err': 'error',
    'key-spacing': ['error', { 'beforeColon': false, 'afterColon': true }],
    'keyword-spacing': 'error',
    'max-len': ['warn', 160, { 'ignoreStrings': true, 'ignoreTemplateLiterals': true }],
    'no-alert': 'error',
    'no-array-constructor': 'error',
    'no-class-assign': 'error',
    'no-const-assign': 'error',
    'no-dupe-class-members': 'error',
    'no-eq-null': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-floating-decimal': 'error',
    'no-implied-eval': 'error',
    'no-iterator': 'error',
    'no-labels': 'error',
    'no-multi-spaces': 'error',
    'no-multi-str': 'error',
    'no-nested-ternary': 'error',
    'no-new-object': 'error',
    'no-process-env': 'error',
    'no-proto': 'error',
    'no-script-url': 'error',
    'no-sequences': 'error',
    'no-tabs': 'error',
    'no-this-before-super': 'error',
    'no-underscore-dangle': ['error', { 'allow': ['_id', '__set__', '__get__', '_type', '_key', '_doc', '_display'] }],
    'no-unsafe-negation': 'error',
    'no-useless-call': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-whitespace-before-property': 'error',
    'no-with': 'error',
    'prefer-rest-params': 'off',
    'prefer-spread': 'off',
    'semi-spacing': ['error', { 'before': false, 'after': true }],
    'sort-imports': 'off',
    'sort-keys': 'off',
    'space-before-blocks': 'error',
    'space-in-parens': 'error',
    'space-infix-ops': 'error',
    'space-unary-ops': 'error',
    'strict': 'error',
    'template-curly-spacing': 'error',
    'wrap-regex': 'error',
    'yield-star-spacing': 'error',
    'yoda': 'error'
  },
  overrides: [
    // JS shared overrides should be put into the shared eslint config
    {
      files: ['**/*.js'],
      rules: {
        // Keeping separate formatting rules for js vs ts files for now since it would be a big pain to
        // merge formatting rules and also if we are converting everything to ts anyway we don't gain much
        // merging the linting rules
        'no-confusing-arrow': 'error',
        'new-cap': ['error', { 'capIsNewExceptionPattern': '^financial' }],
        'no-use-before-define': 'error',
        'space-before-function-paren': [
          'error',
          {
            anonymous: 'always',
            asyncArrow: 'always',
            named: 'always'
          }
        ],
        'arrow-body-style': 'off',
        'arrow-parens': 'off',
        'spaced-comment': 'off',
        'object-shorthand': 'off',
        'id-blacklist': 'off',
        'no-duplicate-imports': 'error',
        'no-multiple-empty-lines': 'off',
        'quote-props': 'off'
      }
    },
    // TS shared overrides should be put into the shared eslint config
    {
      files: ['**/*.ts'],
      rules: {
        // This rule has to live here because it spits out random warning messages if run on JS files
        // would be preferable if we could drop this rule since it uses tslint which we would like to drop
        // completely
        '@typescript-eslint/tslint/config': [
          'error',
          {
            rules: {
              'import-spacing': true,
              'typedef': [
                true,
                'call-signature',
                'parameter'
              ],
              'whitespace': [
                true,
                'check-branch',
                'check-decl',
                'check-operator',
                'check-separator',
                'check-type',
                'check-typecast'
              ]
            }
          }
        ]
      }
    }
  ]
};
